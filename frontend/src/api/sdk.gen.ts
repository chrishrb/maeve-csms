// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-axios';
import type { RegisterChargeStationData, RegisterChargeStationError, RegisterChargeStationResponse, ReconfigureChargeStationData, ReconfigureChargeStationError, ReconfigureChargeStationResponse, InstallChargeStationCertificatesData, InstallChargeStationCertificatesError, InstallChargeStationCertificatesResponse, LookupChargeStationAuthData, LookupChargeStationAuthError, LookupChargeStationAuthResponse, TriggerChargeStationData, TriggerChargeStationError, TriggerChargeStationResponse, SetTokenData, SetTokenError, SetTokenResponse, ListTokensData, ListTokensError, ListTokensResponse, LookupTokenData, LookupTokenError, LookupTokenResponse, UploadCertificateData, UploadCertificateError, UploadCertificateResponse, LookupCertificateData, LookupCertificateError, LookupCertificateResponse, DeleteCertificateData, DeleteCertificateError, DeleteCertificateResponse, RegisterPartyData, RegisterPartyError, RegisterPartyResponse, RegisterLocationData, RegisterLocationError, RegisterLocationResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Register a new charge station
 * Registers a new charge station. The system will assume that the charge station
 * has not yet been provisioned and will place the charge station into a pending state
 * so it can been configured when it sends a boot notification.
 *
 */
export const registerChargeStation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RegisterChargeStationData, ThrowOnError>) => {
    return (options?.client ?? client).post<RegisterChargeStationResponse, RegisterChargeStationError, ThrowOnError>({
        ...options,
        url: '/cs/{csId}'
    });
};

/**
 * Reconfigure the charge station
 * Supplies new configuration that should be applied to the charge station. This is not
 * intended to be used as a general charge station provisioning mechanism, it is intended
 * for one time changes required during testing. After reconfiguration, the charge station
 * will be rebooted so the new configuration can take effect if instructed to.
 *
 */
export const reconfigureChargeStation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<ReconfigureChargeStationData, ThrowOnError>) => {
    return (options?.client ?? client).post<ReconfigureChargeStationResponse, ReconfigureChargeStationError, ThrowOnError>({
        ...options,
        url: '/cs/{csId}/reconfigure'
    });
};

/**
 * Install certificates on the charge station
 */
export const installChargeStationCertificates = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<InstallChargeStationCertificatesData, ThrowOnError>) => {
    return (options?.client ?? client).post<InstallChargeStationCertificatesResponse, InstallChargeStationCertificatesError, ThrowOnError>({
        ...options,
        url: '/cs/{csId}/certificates'
    });
};

/**
 * Returns the authentication details
 * Returns the details required by the CSMS gateway to determine how to authenticate
 * the charge station
 *
 */
export const lookupChargeStationAuth = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<LookupChargeStationAuthData, ThrowOnError>) => {
    return (options?.client ?? client).get<LookupChargeStationAuthResponse, LookupChargeStationAuthError, ThrowOnError>({
        ...options,
        url: '/cs/{csId}/auth'
    });
};

export const triggerChargeStation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TriggerChargeStationData, ThrowOnError>) => {
    return (options?.client ?? client).post<TriggerChargeStationResponse, TriggerChargeStationError, ThrowOnError>({
        ...options,
        url: '/cs/{csId}/trigger'
    });
};

/**
 * Create/update an authorization token
 * Creates or updates a token that can be used to authorize a charge
 *
 */
export const setToken = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<SetTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<SetTokenResponse, SetTokenError, ThrowOnError>({
        ...options,
        url: '/token'
    });
};

/**
 * List authorization tokens
 * Lists all tokens that can be used to authorize a charge
 *
 */
export const listTokens = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<ListTokensData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTokensResponse, ListTokensError, ThrowOnError>({
        ...options,
        url: '/token'
    });
};

/**
 * Lookup an authorization token
 * Lookup a token that can be used to authorize a charge
 *
 */
export const lookupToken = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LookupTokenData, ThrowOnError>) => {
    return (options?.client ?? client).get<LookupTokenResponse, LookupTokenError, ThrowOnError>({
        ...options,
        url: '/token/{tokenUid}'
    });
};

/**
 * Upload a certificate
 * Uploads a client certificate to the CSMS. The CSMS can use the certificate to authenticate
 * the charge station using mutual TLS when the TLS operations are being offloaded to a load-balancer.
 *
 */
export const uploadCertificate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UploadCertificateData, ThrowOnError>) => {
    return (options?.client ?? client).post<UploadCertificateResponse, UploadCertificateError, ThrowOnError>({
        ...options,
        url: '/certificate'
    });
};

/**
 * Lookup a certificate
 * Lookup a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash
 * of the DER bytes.
 *
 */
export const lookupCertificate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<LookupCertificateData, ThrowOnError>) => {
    return (options?.client ?? client).get<LookupCertificateResponse, LookupCertificateError, ThrowOnError>({
        ...options,
        url: '/certificate/{certificateHash}'
    });
};

/**
 * Delete a certificate
 * Deletes a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash
 * of the DER bytes.
 *
 */
export const deleteCertificate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteCertificateData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCertificateResponse, DeleteCertificateError, ThrowOnError>({
        ...options,
        url: '/certificate/{certificateHash}'
    });
};

/**
 * Registers an OCPI party with the CSMS
 * Registers an OCPI party with the CSMS. Depending on the configuration provided the CSMS will
 * either initiate a registration with the party or the party will wait for the party to initiate
 * a registration with the CSMS.
 *
 */
export const registerParty = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RegisterPartyData, ThrowOnError>) => {
    return (options?.client ?? client).post<RegisterPartyResponse, RegisterPartyError, ThrowOnError>({
        ...options,
        url: '/register'
    });
};

/**
 * Registers a location with the CSMS
 * Registers a location with the CSMS.
 *
 */
export const registerLocation = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RegisterLocationData, ThrowOnError>) => {
    return (options?.client ?? client).post<RegisterLocationResponse, RegisterLocationError, ThrowOnError>({
        ...options,
        url: '/location/{locationId}'
    });
};