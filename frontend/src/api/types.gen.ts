// This file is auto-generated by @hey-api/openapi-ts

/**
 * A client certificate
 */
export type Certificate = {
    /**
     * The PEM encoded certificate with newlines replaced by `\n`
     */
    certificate: string;
};

/**
 * Connection details for a charge station
 */
export type ChargeStationAuth = {
    /**
     * The security profile to use for the charge station: * `0` - unsecured transport with basic auth * `1` - TLS with basic auth * `2` - TLS with client certificate
     *
     */
    securityProfile: number;
    /**
     * The base64 encoded, SHA-256 hash of the charge station password
     */
    base64SHA256Password?: string;
    /**
     * If set to true then an invalid username will not prevent the charge station connecting
     */
    invalidUsernameAllowed?: boolean;
};

/**
 * The set of certificates to install on the charge station. The certificates will be sent
 * to the charge station asynchronously.
 *
 */
export type ChargeStationInstallCertificates = {
    certificates: Array<{
        type: 'V2G' | 'MO' | 'MF' | 'CSMS';
        /**
         * The PEM encoded certificate with newlines replaced by `\n`
         */
        certificate: string;
        /**
         * The status, defaults to Pending
         */
        status?: 'Accepted' | 'Rejected' | 'Pending';
    }>;
};

/**
 * Settings for a charge station
 */
export type ChargeStationSettings = {
    [key: string]: (string);
};

/**
 * Trigger a charge station action
 */
export type ChargeStationTrigger = {
    trigger: 'BootNotification' | 'StatusNotification' | 'SignV2GCertificate' | 'SignChargingStationCertificate' | 'SignCombinedCertificate';
};

export type trigger = 'BootNotification' | 'StatusNotification' | 'SignV2GCertificate' | 'SignChargingStationCertificate' | 'SignCombinedCertificate';

export type Connector = {
    id: string;
    standard: 'CHADEMO' | 'CHAOJI' | 'DOMESTIC_A' | 'DOMESTIC_B' | 'DOMESTIC_C' | 'DOMESTIC_D' | 'DOMESTIC_E' | 'DOMESTIC_F' | 'DOMESTIC_G' | 'DOMESTIC_H' | 'DOMESTIC_I' | 'DOMESTIC_J' | 'DOMESTIC_K' | 'DOMESTIC_L' | 'GBT_AC' | 'GBT_DC' | 'IEC_60309_2_single_16' | 'IEC_60309_2_three_16' | 'IEC_60309_2_three_32' | 'IEC_60309_2_three_64' | 'IEC_62196_T1' | 'IEC_62196_T1_COMBO' | 'IEC_62196_T2' | 'IEC_62196_T2_COMBO' | 'IEC_62196_T3A' | 'IEC_62196_T3C' | 'NEMA_5_20' | 'NEMA_6_30' | 'NEMA_6_50' | 'NEMA_10_30' | 'NEMA_10_50' | 'NEMA_14_30' | 'NEMA_14_50' | 'PANTOGRAPH_BOTTOM_UP' | 'PANTOGRAPH_TOP_DOWN' | 'TESLA_R' | 'TESLA_S' | 'UNKNOWN';
    format: 'SOCKET' | 'CABLE';
    power_type: 'AC_1_PHASE' | 'AC_3_PHASE' | 'DC';
    max_voltage: number;
    max_amperage: number;
};

export type standard = 'CHADEMO' | 'CHAOJI' | 'DOMESTIC_A' | 'DOMESTIC_B' | 'DOMESTIC_C' | 'DOMESTIC_D' | 'DOMESTIC_E' | 'DOMESTIC_F' | 'DOMESTIC_G' | 'DOMESTIC_H' | 'DOMESTIC_I' | 'DOMESTIC_J' | 'DOMESTIC_K' | 'DOMESTIC_L' | 'GBT_AC' | 'GBT_DC' | 'IEC_60309_2_single_16' | 'IEC_60309_2_three_16' | 'IEC_60309_2_three_32' | 'IEC_60309_2_three_64' | 'IEC_62196_T1' | 'IEC_62196_T1_COMBO' | 'IEC_62196_T2' | 'IEC_62196_T2_COMBO' | 'IEC_62196_T3A' | 'IEC_62196_T3C' | 'NEMA_5_20' | 'NEMA_6_30' | 'NEMA_6_50' | 'NEMA_10_30' | 'NEMA_10_50' | 'NEMA_14_30' | 'NEMA_14_50' | 'PANTOGRAPH_BOTTOM_UP' | 'PANTOGRAPH_TOP_DOWN' | 'TESLA_R' | 'TESLA_S' | 'UNKNOWN';

export type format = 'SOCKET' | 'CABLE';

export type power_type = 'AC_1_PHASE' | 'AC_3_PHASE' | 'DC';

export type Evse = {
    /**
     * Uniquely identifies the EVSE within the CPOs platform (and
     * suboperator platforms).
     */
    uid: string;
    evse_id?: (string) | null;
    connectors: Array<Connector>;
};

export type GeoLocation = {
    latitude: string;
    longitude: string;
};

/**
 * A charge station location
 */
export type Location = {
    country_code: string;
    party_id: string;
    name?: (string) | null;
    address: string;
    city: string;
    postal_code?: (string) | null;
    country: string;
    coordinates: GeoLocation;
    parking_type?: ('ALONG_MOTORWAY' | 'PARKING_GARAGE' | 'PARKING_LOT' | 'ON_DRIVEWAY' | 'ON_STREET' | 'UNDERGROUND_GARAGE') | null;
    evses?: Array<Evse> | null;
};

export type parking_type = 'ALONG_MOTORWAY' | 'PARKING_GARAGE' | 'PARKING_LOT' | 'ON_DRIVEWAY' | 'ON_STREET' | 'UNDERGROUND_GARAGE';

/**
 * Defines the initial connection details for the OCPI registration process
 */
export type Registration = {
    /**
     * The token to use for communicating with the eMSP (CREDENTIALS_TOKEN_A).
     */
    token: string;
    /**
     * The URL of the eMSP versions endpoint. If provided the CSMS will act as the sender of the versions request.
     */
    url?: string;
    /**
     * The status of the registration request. If the request is marked as `REGISTERED` then the token will be allowed to
     * be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as
     * `PENDING` then the token will only be allowed to access the `/ocpi/versions`, `/ocpi/2.2` and `/ocpi/2.2/credentials`
     * endpoints.
     *
     */
    status?: 'PENDING' | 'REGISTERED';
};

/**
 * The status of the registration request. If the request is marked as `REGISTERED` then the token will be allowed to
 * be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as
 * `PENDING` then the token will only be allowed to access the `/ocpi/versions`, `/ocpi/2.2` and `/ocpi/2.2/credentials`
 * endpoints.
 *
 */
export type status = 'PENDING' | 'REGISTERED';

/**
 * HTTP status
 */
export type Status = {
    /**
     * The status description
     */
    status: string;
    /**
     * The error details
     */
    error?: string;
};

/**
 * An authorization token
 */
export type Token = {
    /**
     * The country code of the issuing eMSP
     */
    countryCode: string;
    /**
     * The party id of the issuing eMSP
     */
    partyId: string;
    /**
     * The type of token
     */
    type: 'AD_HOC_USER' | 'APP_USER' | 'OTHER' | 'RFID';
    /**
     * The unique token id
     */
    uid: string;
    /**
     * The contract ID (eMAID) associated with the token (with optional component separators)
     */
    contractId: string;
    /**
     * The visual/readable number/identification printed on an RFID card
     */
    visualNumber?: string;
    /**
     * Issuing company, most of the times the name of the company printed on the RFID card, not necessarily the eMSP
     */
    issuer: string;
    /**
     * This id groups a couple of tokens to make two or more tokens work as one
     */
    groupId?: string;
    /**
     * Is this token valid
     */
    valid: boolean;
    /**
     * The preferred language to use encoded as ISO 639-1 language code
     */
    languageCode?: string;
    /**
     * Indicates what type of token caching is allowed
     */
    cacheMode: 'ALWAYS' | 'ALLOWED' | 'ALLOWED_OFFLINE' | 'NEVER';
    /**
     * The date the record was last updated (ignored on create/update)
     */
    lastUpdated?: string;
};

/**
 * The type of token
 */
export type type = 'AD_HOC_USER' | 'APP_USER' | 'OTHER' | 'RFID';

/**
 * Indicates what type of token caching is allowed
 */
export type cacheMode = 'ALWAYS' | 'ALLOWED' | 'ALLOWED_OFFLINE' | 'NEVER';

export type RegisterChargeStationData = {
    body: ChargeStationAuth;
    path?: {
        /**
         * The charge station identifier
         */
        csId?: string;
    };
};

export type RegisterChargeStationResponse = (unknown);

export type RegisterChargeStationError = (Status);

export type ReconfigureChargeStationData = {
    body: ChargeStationSettings;
    path?: {
        /**
         * The charge station identifier
         */
        csId?: string;
    };
};

export type ReconfigureChargeStationResponse = (unknown);

export type ReconfigureChargeStationError = (Status);

export type InstallChargeStationCertificatesData = {
    body: ChargeStationInstallCertificates;
    path?: {
        /**
         * The charge station identifier
         */
        csId?: string;
    };
};

export type InstallChargeStationCertificatesResponse = (unknown);

export type InstallChargeStationCertificatesError = (Status);

export type LookupChargeStationAuthData = {
    path?: {
        /**
         * The charge station identifier
         */
        csId?: string;
    };
};

export type LookupChargeStationAuthResponse = (ChargeStationAuth);

export type LookupChargeStationAuthError = (Status);

export type TriggerChargeStationData = {
    body: ChargeStationTrigger;
    path?: {
        /**
         * The charge station identifier
         */
        csId?: string;
    };
};

export type TriggerChargeStationResponse = (unknown);

export type TriggerChargeStationError = (Status);

export type SetTokenData = {
    body: Token;
};

export type SetTokenResponse = (unknown);

export type SetTokenError = (Status);

export type ListTokensData = {
    query?: {
        limit?: number;
        offset?: number;
    };
};

export type ListTokensResponse = (Array<Token>);

export type ListTokensError = (Status);

export type LookupTokenData = {
    path: {
        tokenUid: string;
    };
};

export type LookupTokenResponse = (Token);

export type LookupTokenError = (Status);

export type UploadCertificateData = {
    body: Certificate;
};

export type UploadCertificateResponse = (unknown);

export type UploadCertificateError = (Status);

export type LookupCertificateData = {
    path: {
        certificateHash: string;
    };
};

export type LookupCertificateResponse = (Certificate);

export type LookupCertificateError = (Status);

export type DeleteCertificateData = {
    path: {
        certificateHash: string;
    };
};

export type DeleteCertificateResponse = (void);

export type DeleteCertificateError = (Status);

export type RegisterPartyData = {
    body: Registration;
};

export type RegisterPartyResponse = (unknown);

export type RegisterPartyError = (Status);

export type RegisterLocationData = {
    body: Location;
    path?: {
        /**
         * The location identifier
         */
        locationId?: string;
    };
};

export type RegisterLocationResponse = (unknown);

export type RegisterLocationError = (Status);