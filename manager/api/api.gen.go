// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ChargeStationInstallCertificatesCertificatesStatus.
const (
	Accepted ChargeStationInstallCertificatesCertificatesStatus = "Accepted"
	Pending  ChargeStationInstallCertificatesCertificatesStatus = "Pending"
	Rejected ChargeStationInstallCertificatesCertificatesStatus = "Rejected"
)

// Defines values for ChargeStationInstallCertificatesCertificatesType.
const (
	CSMS ChargeStationInstallCertificatesCertificatesType = "CSMS"
	MF   ChargeStationInstallCertificatesCertificatesType = "MF"
	MO   ChargeStationInstallCertificatesCertificatesType = "MO"
	V2G  ChargeStationInstallCertificatesCertificatesType = "V2G"
)

// Defines values for ChargeStationTriggerTrigger.
const (
	BootNotification               ChargeStationTriggerTrigger = "BootNotification"
	SignChargingStationCertificate ChargeStationTriggerTrigger = "SignChargingStationCertificate"
	SignCombinedCertificate        ChargeStationTriggerTrigger = "SignCombinedCertificate"
	SignV2GCertificate             ChargeStationTriggerTrigger = "SignV2GCertificate"
	StatusNotification             ChargeStationTriggerTrigger = "StatusNotification"
)

// Defines values for ConnectorFormat.
const (
	CABLE  ConnectorFormat = "CABLE"
	SOCKET ConnectorFormat = "SOCKET"
)

// Defines values for ConnectorPowerType.
const (
	AC1PHASE ConnectorPowerType = "AC_1_PHASE"
	AC3PHASE ConnectorPowerType = "AC_3_PHASE"
	DC       ConnectorPowerType = "DC"
)

// Defines values for ConnectorStandard.
const (
	CHADEMO            ConnectorStandard = "CHADEMO"
	CHAOJI             ConnectorStandard = "CHAOJI"
	DOMESTICA          ConnectorStandard = "DOMESTIC_A"
	DOMESTICB          ConnectorStandard = "DOMESTIC_B"
	DOMESTICC          ConnectorStandard = "DOMESTIC_C"
	DOMESTICD          ConnectorStandard = "DOMESTIC_D"
	DOMESTICE          ConnectorStandard = "DOMESTIC_E"
	DOMESTICF          ConnectorStandard = "DOMESTIC_F"
	DOMESTICG          ConnectorStandard = "DOMESTIC_G"
	DOMESTICH          ConnectorStandard = "DOMESTIC_H"
	DOMESTICI          ConnectorStandard = "DOMESTIC_I"
	DOMESTICJ          ConnectorStandard = "DOMESTIC_J"
	DOMESTICK          ConnectorStandard = "DOMESTIC_K"
	DOMESTICL          ConnectorStandard = "DOMESTIC_L"
	GBTAC              ConnectorStandard = "GBT_AC"
	GBTDC              ConnectorStandard = "GBT_DC"
	IEC603092Single16  ConnectorStandard = "IEC_60309_2_single_16"
	IEC603092Three16   ConnectorStandard = "IEC_60309_2_three_16"
	IEC603092Three32   ConnectorStandard = "IEC_60309_2_three_32"
	IEC603092Three64   ConnectorStandard = "IEC_60309_2_three_64"
	IEC62196T1         ConnectorStandard = "IEC_62196_T1"
	IEC62196T1COMBO    ConnectorStandard = "IEC_62196_T1_COMBO"
	IEC62196T2         ConnectorStandard = "IEC_62196_T2"
	IEC62196T2COMBO    ConnectorStandard = "IEC_62196_T2_COMBO"
	IEC62196T3A        ConnectorStandard = "IEC_62196_T3A"
	IEC62196T3C        ConnectorStandard = "IEC_62196_T3C"
	NEMA1030           ConnectorStandard = "NEMA_10_30"
	NEMA1050           ConnectorStandard = "NEMA_10_50"
	NEMA1430           ConnectorStandard = "NEMA_14_30"
	NEMA1450           ConnectorStandard = "NEMA_14_50"
	NEMA520            ConnectorStandard = "NEMA_5_20"
	NEMA630            ConnectorStandard = "NEMA_6_30"
	NEMA650            ConnectorStandard = "NEMA_6_50"
	PANTOGRAPHBOTTOMUP ConnectorStandard = "PANTOGRAPH_BOTTOM_UP"
	PANTOGRAPHTOPDOWN  ConnectorStandard = "PANTOGRAPH_TOP_DOWN"
	TESLAR             ConnectorStandard = "TESLA_R"
	TESLAS             ConnectorStandard = "TESLA_S"
	UNKNOWN            ConnectorStandard = "UNKNOWN"
)

// Defines values for EvseStatus.
const (
	Available   EvseStatus = "Available"
	Charging    EvseStatus = "Charging"
	Faulted     EvseStatus = "Faulted"
	Finishing   EvseStatus = "Finishing"
	Occupied    EvseStatus = "Occupied"
	Reserved    EvseStatus = "Reserved"
	Unavailable EvseStatus = "Unavailable"
)

// Defines values for LocationParkingType.
const (
	ALONGMOTORWAY     LocationParkingType = "ALONG_MOTORWAY"
	ONDRIVEWAY        LocationParkingType = "ON_DRIVEWAY"
	ONSTREET          LocationParkingType = "ON_STREET"
	PARKINGGARAGE     LocationParkingType = "PARKING_GARAGE"
	PARKINGLOT        LocationParkingType = "PARKING_LOT"
	UNDERGROUNDGARAGE LocationParkingType = "UNDERGROUND_GARAGE"
)

// Defines values for RegistrationStatus.
const (
	PENDING    RegistrationStatus = "PENDING"
	REGISTERED RegistrationStatus = "REGISTERED"
)

// Defines values for TokenCacheMode.
const (
	ALLOWED        TokenCacheMode = "ALLOWED"
	ALLOWEDOFFLINE TokenCacheMode = "ALLOWED_OFFLINE"
	ALWAYS         TokenCacheMode = "ALWAYS"
	NEVER          TokenCacheMode = "NEVER"
)

// Defines values for TokenType.
const (
	ADHOCUSER TokenType = "AD_HOC_USER"
	APPUSER   TokenType = "APP_USER"
	OTHER     TokenType = "OTHER"
	RFID      TokenType = "RFID"
)

// Certificate A client certificate
type Certificate struct {
	// Certificate The PEM encoded certificate with newlines replaced by `\n`
	Certificate string `json:"certificate"`
}

// ChargeStation Represents a charge station.
type ChargeStation struct {
	// Base64SHA256Password The base64 encoded, SHA-256 hash of the charge station password
	Base64SHA256Password *string `json:"base64_SHA256_password,omitempty"`

	// Evses List of EVSEs available at the charge station.
	Evses *[]Evse `json:"evses"`

	// Id Unique identifier for the charge station.
	Id *string `json:"id,omitempty"`

	// InvalidUsernameAllowed If set to true then an invalid username will not prevent the charge station connecting
	InvalidUsernameAllowed *bool `json:"invalid_username_allowed,omitempty"`

	// LocationId Identifier for the location of the charge station.
	LocationId string `json:"location_id"`

	// SecurityProfile The security profile to use for the charge station: * `0` - unsecured transport with basic auth * `1` - TLS with basic auth * `2` - TLS with client certificate
	SecurityProfile int `json:"security_profile"`
}

// ChargeStationInstallCertificates The set of certificates to install on the charge station. The certificates will be sent
// to the charge station asynchronously.
type ChargeStationInstallCertificates struct {
	Certificates []struct {
		// Certificate The PEM encoded certificate with newlines replaced by `\n`
		Certificate string `json:"certificate"`

		// Status The status, defaults to Pending
		Status *ChargeStationInstallCertificatesCertificatesStatus `json:"status,omitempty"`
		Type   ChargeStationInstallCertificatesCertificatesType    `json:"type"`
	} `json:"certificates"`
}

// ChargeStationInstallCertificatesCertificatesStatus The status, defaults to Pending
type ChargeStationInstallCertificatesCertificatesStatus string

// ChargeStationInstallCertificatesCertificatesType defines model for ChargeStationInstallCertificates.Certificates.Type.
type ChargeStationInstallCertificatesCertificatesType string

// ChargeStationSettings Settings for a charge station
type ChargeStationSettings map[string]string

// ChargeStationTrigger Trigger a charge station action
type ChargeStationTrigger struct {
	Trigger ChargeStationTriggerTrigger `json:"trigger"`
}

// ChargeStationTriggerTrigger defines model for ChargeStationTrigger.Trigger.
type ChargeStationTriggerTrigger string

// Connector defines model for Connector.
type Connector struct {
	Format ConnectorFormat `json:"format"`
	Id     string          `json:"id"`

	// LastUpdated The date the record was last updated (ignored on create/update)
	LastUpdated *time.Time         `json:"last_updated,omitempty"`
	MaxAmperage int32              `json:"max_amperage"`
	MaxVoltage  int32              `json:"max_voltage"`
	PowerType   ConnectorPowerType `json:"power_type"`
	Standard    ConnectorStandard  `json:"standard"`
}

// ConnectorFormat defines model for Connector.Format.
type ConnectorFormat string

// ConnectorPowerType defines model for Connector.PowerType.
type ConnectorPowerType string

// ConnectorStandard defines model for Connector.Standard.
type ConnectorStandard string

// Evse defines model for Evse.
type Evse struct {
	Connectors []Connector `json:"connectors"`
	EvseId     *string     `json:"evse_id"`

	// LastUpdated The date the record was last updated (ignored on create/update)
	LastUpdated *time.Time `json:"last_updated,omitempty"`

	// Status The current operational status of the EVSE.
	Status EvseStatus `json:"status"`

	// Uid Uniquely identifies the EVSE within the CPOs platform (and
	// suboperator platforms).
	Uid string `json:"uid"`
}

// EvseStatus The current operational status of the EVSE.
type EvseStatus string

// GeoLocation defines model for GeoLocation.
type GeoLocation struct {
	Latitude  string `json:"latitude"`
	Longitude string `json:"longitude"`
}

// Location A charge station location
type Location struct {
	Address     string               `json:"address"`
	City        string               `json:"city"`
	Coordinates GeoLocation          `json:"coordinates"`
	Country     string               `json:"country"`
	CountryCode string               `json:"country_code"`
	Id          *string              `json:"id,omitempty"`
	Name        *string              `json:"name"`
	ParkingType *LocationParkingType `json:"parking_type"`
	PartyId     string               `json:"party_id"`
	PostalCode  *string              `json:"postal_code"`
}

// LocationParkingType defines model for Location.ParkingType.
type LocationParkingType string

// Registration Defines the initial connection details for the OCPI registration process
type Registration struct {
	// Status The status of the registration request. If the request is marked as `REGISTERED` then the token will be allowed to
	// be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as
	// `PENDING` then the token will only be allowed to access the `/ocpi/versions`, `/ocpi/2.2` and `/ocpi/2.2/credentials`
	// endpoints.
	Status *RegistrationStatus `json:"status,omitempty"`

	// Token The token to use for communicating with the eMSP (CREDENTIALS_TOKEN_A).
	Token string `json:"token"`

	// Url The URL of the eMSP versions endpoint. If provided the CSMS will act as the sender of the versions request.
	Url *string `json:"url,omitempty"`
}

// RegistrationStatus The status of the registration request. If the request is marked as `REGISTERED` then the token will be allowed to
// be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as
// `PENDING` then the token will only be allowed to access the `/ocpi/versions`, `/ocpi/2.2` and `/ocpi/2.2/credentials`
// endpoints.
type RegistrationStatus string

// Status HTTP status
type Status struct {
	// Error The error details
	Error *string `json:"error,omitempty"`

	// Status The status description
	Status string `json:"status"`
}

// Token An authorization token
type Token struct {
	// CacheMode Indicates what type of token caching is allowed
	CacheMode TokenCacheMode `json:"cache_mode"`

	// ContractId The contract ID (eMAID) associated with the token (with optional component separators)
	ContractId string `json:"contract_id"`

	// CountryCode The country code of the issuing eMSP
	CountryCode string `json:"country_code"`

	// GroupId This id groups a couple of tokens to make two or more tokens work as one
	GroupId *string `json:"group_id,omitempty"`

	// Issuer Issuing company, most of the times the name of the company printed on the RFID card, not necessarily the eMSP
	Issuer string `json:"issuer"`

	// LanguageCode The preferred language to use encoded as ISO 639-1 language code
	LanguageCode *string `json:"language_code,omitempty"`

	// LastUpdated The date the record was last updated (ignored on create/update)
	LastUpdated *time.Time `json:"last_updated,omitempty"`

	// PartyId The party id of the issuing eMSP
	PartyId string `json:"party_id"`

	// Type The type of token
	Type TokenType `json:"type"`

	// Uid The unique token id
	Uid string `json:"uid"`

	// Valid Is this token valid
	Valid bool `json:"valid"`

	// VisualNumber The visual/readable number/identification printed on an RFID card
	VisualNumber *string `json:"visual_number,omitempty"`
}

// TokenCacheMode Indicates what type of token caching is allowed
type TokenCacheMode string

// TokenType The type of token
type TokenType string

// ListChargeStationsParams defines parameters for ListChargeStations.
type ListChargeStationsParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListLocationsParams defines parameters for ListLocations.
type ListLocationsParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListTokensParams defines parameters for ListTokens.
type ListTokensParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// UploadCertificateJSONRequestBody defines body for UploadCertificate for application/json ContentType.
type UploadCertificateJSONRequestBody = Certificate

// RegisterChargeStationJSONRequestBody defines body for RegisterChargeStation for application/json ContentType.
type RegisterChargeStationJSONRequestBody = ChargeStation

// UpdateChargeStationJSONRequestBody defines body for UpdateChargeStation for application/json ContentType.
type UpdateChargeStationJSONRequestBody = ChargeStation

// InstallChargeStationCertificatesJSONRequestBody defines body for InstallChargeStationCertificates for application/json ContentType.
type InstallChargeStationCertificatesJSONRequestBody = ChargeStationInstallCertificates

// ReconfigureChargeStationJSONRequestBody defines body for ReconfigureChargeStation for application/json ContentType.
type ReconfigureChargeStationJSONRequestBody = ChargeStationSettings

// TriggerChargeStationJSONRequestBody defines body for TriggerChargeStation for application/json ContentType.
type TriggerChargeStationJSONRequestBody = ChargeStationTrigger

// RegisterLocationJSONRequestBody defines body for RegisterLocation for application/json ContentType.
type RegisterLocationJSONRequestBody = Location

// UpdateLocationJSONRequestBody defines body for UpdateLocation for application/json ContentType.
type UpdateLocationJSONRequestBody = Location

// RegisterPartyJSONRequestBody defines body for RegisterParty for application/json ContentType.
type RegisterPartyJSONRequestBody = Registration

// SetTokenJSONRequestBody defines body for SetToken for application/json ContentType.
type SetTokenJSONRequestBody = Token

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a certificate
	// (POST /certificate)
	UploadCertificate(w http.ResponseWriter, r *http.Request)
	// Delete a certificate
	// (DELETE /certificate/{certificate_hash})
	DeleteCertificate(w http.ResponseWriter, r *http.Request, certificateHash string)
	// Lookup a certificate
	// (GET /certificate/{certificate_hash})
	LookupCertificate(w http.ResponseWriter, r *http.Request, certificateHash string)
	// List Charge Stations
	// (GET /cs)
	ListChargeStations(w http.ResponseWriter, r *http.Request, params ListChargeStationsParams)
	// Register a new charge station
	// (POST /cs)
	RegisterChargeStation(w http.ResponseWriter, r *http.Request)
	// Delete Charge Station by ID
	// (DELETE /cs/{cs_id})
	DeleteChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// Get Charge Station by ID
	// (GET /cs/{cs_id})
	LookupChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// Update a charge station
	// (PUT /cs/{cs_id})
	UpdateChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// Install certificates on the charge station
	// (POST /cs/{cs_id}/certificates)
	InstallChargeStationCertificates(w http.ResponseWriter, r *http.Request, csId string)
	// Reconfigure the charge station
	// (POST /cs/{cs_id}/reconfigure)
	ReconfigureChargeStation(w http.ResponseWriter, r *http.Request, csId string)

	// (POST /cs/{cs_id}/trigger)
	TriggerChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// List locations
	// (GET /location)
	ListLocations(w http.ResponseWriter, r *http.Request, params ListLocationsParams)
	// Registers a location with the CSMS
	// (POST /location)
	RegisterLocation(w http.ResponseWriter, r *http.Request)
	// Delete a location by ID
	// (DELETE /location/{locationId})
	DeleteLocation(w http.ResponseWriter, r *http.Request, locationId string)
	// Lookup a location by ID
	// (GET /location/{locationId})
	LookupLocation(w http.ResponseWriter, r *http.Request, locationId string)
	// Update a location
	// (PUT /location/{locationId})
	UpdateLocation(w http.ResponseWriter, r *http.Request, locationId string)
	// Registers an OCPI party with the CSMS
	// (POST /register)
	RegisterParty(w http.ResponseWriter, r *http.Request)
	// List authorization tokens
	// (GET /token)
	ListTokens(w http.ResponseWriter, r *http.Request, params ListTokensParams)
	// Create/update an authorization token
	// (POST /token)
	SetToken(w http.ResponseWriter, r *http.Request)
	// Lookup an authorization token
	// (GET /token/{token_uid})
	LookupToken(w http.ResponseWriter, r *http.Request, tokenUid string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Upload a certificate
// (POST /certificate)
func (_ Unimplemented) UploadCertificate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a certificate
// (DELETE /certificate/{certificate_hash})
func (_ Unimplemented) DeleteCertificate(w http.ResponseWriter, r *http.Request, certificateHash string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lookup a certificate
// (GET /certificate/{certificate_hash})
func (_ Unimplemented) LookupCertificate(w http.ResponseWriter, r *http.Request, certificateHash string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Charge Stations
// (GET /cs)
func (_ Unimplemented) ListChargeStations(w http.ResponseWriter, r *http.Request, params ListChargeStationsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new charge station
// (POST /cs)
func (_ Unimplemented) RegisterChargeStation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Charge Station by ID
// (DELETE /cs/{cs_id})
func (_ Unimplemented) DeleteChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Charge Station by ID
// (GET /cs/{cs_id})
func (_ Unimplemented) LookupChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a charge station
// (PUT /cs/{cs_id})
func (_ Unimplemented) UpdateChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Install certificates on the charge station
// (POST /cs/{cs_id}/certificates)
func (_ Unimplemented) InstallChargeStationCertificates(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reconfigure the charge station
// (POST /cs/{cs_id}/reconfigure)
func (_ Unimplemented) ReconfigureChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /cs/{cs_id}/trigger)
func (_ Unimplemented) TriggerChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List locations
// (GET /location)
func (_ Unimplemented) ListLocations(w http.ResponseWriter, r *http.Request, params ListLocationsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Registers a location with the CSMS
// (POST /location)
func (_ Unimplemented) RegisterLocation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a location by ID
// (DELETE /location/{locationId})
func (_ Unimplemented) DeleteLocation(w http.ResponseWriter, r *http.Request, locationId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lookup a location by ID
// (GET /location/{locationId})
func (_ Unimplemented) LookupLocation(w http.ResponseWriter, r *http.Request, locationId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a location
// (PUT /location/{locationId})
func (_ Unimplemented) UpdateLocation(w http.ResponseWriter, r *http.Request, locationId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Registers an OCPI party with the CSMS
// (POST /register)
func (_ Unimplemented) RegisterParty(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List authorization tokens
// (GET /token)
func (_ Unimplemented) ListTokens(w http.ResponseWriter, r *http.Request, params ListTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create/update an authorization token
// (POST /token)
func (_ Unimplemented) SetToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lookup an authorization token
// (GET /token/{token_uid})
func (_ Unimplemented) LookupToken(w http.ResponseWriter, r *http.Request, tokenUid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UploadCertificate operation middleware
func (siw *ServerInterfaceWrapper) UploadCertificate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadCertificate(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCertificate operation middleware
func (siw *ServerInterfaceWrapper) DeleteCertificate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "certificate_hash" -------------
	var certificateHash string

	err = runtime.BindStyledParameterWithOptions("simple", "certificate_hash", chi.URLParam(r, "certificate_hash"), &certificateHash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "certificate_hash", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCertificate(w, r, certificateHash)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupCertificate operation middleware
func (siw *ServerInterfaceWrapper) LookupCertificate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "certificate_hash" -------------
	var certificateHash string

	err = runtime.BindStyledParameterWithOptions("simple", "certificate_hash", chi.URLParam(r, "certificate_hash"), &certificateHash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "certificate_hash", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupCertificate(w, r, certificateHash)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListChargeStations operation middleware
func (siw *ServerInterfaceWrapper) ListChargeStations(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListChargeStationsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListChargeStations(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterChargeStation operation middleware
func (siw *ServerInterfaceWrapper) RegisterChargeStation(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterChargeStation(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteChargeStation operation middleware
func (siw *ServerInterfaceWrapper) DeleteChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupChargeStation operation middleware
func (siw *ServerInterfaceWrapper) LookupChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateChargeStation operation middleware
func (siw *ServerInterfaceWrapper) UpdateChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// InstallChargeStationCertificates operation middleware
func (siw *ServerInterfaceWrapper) InstallChargeStationCertificates(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InstallChargeStationCertificates(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ReconfigureChargeStation operation middleware
func (siw *ServerInterfaceWrapper) ReconfigureChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReconfigureChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TriggerChargeStation operation middleware
func (siw *ServerInterfaceWrapper) TriggerChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TriggerChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListLocations operation middleware
func (siw *ServerInterfaceWrapper) ListLocations(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLocationsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLocations(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterLocation operation middleware
func (siw *ServerInterfaceWrapper) RegisterLocation(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterLocation(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteLocation operation middleware
func (siw *ServerInterfaceWrapper) DeleteLocation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "locationId" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "locationId", chi.URLParam(r, "locationId"), &locationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "locationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLocation(w, r, locationId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupLocation operation middleware
func (siw *ServerInterfaceWrapper) LookupLocation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "locationId" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "locationId", chi.URLParam(r, "locationId"), &locationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "locationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupLocation(w, r, locationId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateLocation operation middleware
func (siw *ServerInterfaceWrapper) UpdateLocation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "locationId" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "locationId", chi.URLParam(r, "locationId"), &locationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "locationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLocation(w, r, locationId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterParty operation middleware
func (siw *ServerInterfaceWrapper) RegisterParty(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterParty(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTokens operation middleware
func (siw *ServerInterfaceWrapper) ListTokens(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTokensParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SetToken operation middleware
func (siw *ServerInterfaceWrapper) SetToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupToken operation middleware
func (siw *ServerInterfaceWrapper) LookupToken(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "token_uid" -------------
	var tokenUid string

	err = runtime.BindStyledParameterWithOptions("simple", "token_uid", chi.URLParam(r, "token_uid"), &tokenUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token_uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupToken(w, r, tokenUid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/certificate", wrapper.UploadCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/certificate/{certificate_hash}", wrapper.DeleteCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/certificate/{certificate_hash}", wrapper.LookupCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cs", wrapper.ListChargeStations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs", wrapper.RegisterChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/cs/{cs_id}", wrapper.DeleteChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cs/{cs_id}", wrapper.LookupChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/cs/{cs_id}", wrapper.UpdateChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs/{cs_id}/certificates", wrapper.InstallChargeStationCertificates)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs/{cs_id}/reconfigure", wrapper.ReconfigureChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs/{cs_id}/trigger", wrapper.TriggerChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/location", wrapper.ListLocations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/location", wrapper.RegisterLocation)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/location/{locationId}", wrapper.DeleteLocation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/location/{locationId}", wrapper.LookupLocation)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/location/{locationId}", wrapper.UpdateLocation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.RegisterParty)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/token", wrapper.ListTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/token", wrapper.SetToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/token/{token_uid}", wrapper.LookupToken)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"e3Ny1GrShDUfWt7zp+f/CwAA///nZLutDVQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
