// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ChargeStationInstallCertificatesCertificatesStatus.
const (
	Accepted ChargeStationInstallCertificatesCertificatesStatus = "Accepted"
	Pending  ChargeStationInstallCertificatesCertificatesStatus = "Pending"
	Rejected ChargeStationInstallCertificatesCertificatesStatus = "Rejected"
)

// Defines values for ChargeStationInstallCertificatesCertificatesType.
const (
	CSMS ChargeStationInstallCertificatesCertificatesType = "CSMS"
	MF   ChargeStationInstallCertificatesCertificatesType = "MF"
	MO   ChargeStationInstallCertificatesCertificatesType = "MO"
	V2G  ChargeStationInstallCertificatesCertificatesType = "V2G"
)

// Defines values for ChargeStationTriggerTrigger.
const (
	BootNotification               ChargeStationTriggerTrigger = "BootNotification"
	SignChargingStationCertificate ChargeStationTriggerTrigger = "SignChargingStationCertificate"
	SignCombinedCertificate        ChargeStationTriggerTrigger = "SignCombinedCertificate"
	SignV2GCertificate             ChargeStationTriggerTrigger = "SignV2GCertificate"
	StatusNotification             ChargeStationTriggerTrigger = "StatusNotification"
)

// Defines values for ConnectorFormat.
const (
	CABLE  ConnectorFormat = "CABLE"
	SOCKET ConnectorFormat = "SOCKET"
)

// Defines values for ConnectorPowerType.
const (
	AC1PHASE ConnectorPowerType = "AC_1_PHASE"
	AC3PHASE ConnectorPowerType = "AC_3_PHASE"
	DC       ConnectorPowerType = "DC"
)

// Defines values for ConnectorStandard.
const (
	CHADEMO            ConnectorStandard = "CHADEMO"
	CHAOJI             ConnectorStandard = "CHAOJI"
	DOMESTICA          ConnectorStandard = "DOMESTIC_A"
	DOMESTICB          ConnectorStandard = "DOMESTIC_B"
	DOMESTICC          ConnectorStandard = "DOMESTIC_C"
	DOMESTICD          ConnectorStandard = "DOMESTIC_D"
	DOMESTICE          ConnectorStandard = "DOMESTIC_E"
	DOMESTICF          ConnectorStandard = "DOMESTIC_F"
	DOMESTICG          ConnectorStandard = "DOMESTIC_G"
	DOMESTICH          ConnectorStandard = "DOMESTIC_H"
	DOMESTICI          ConnectorStandard = "DOMESTIC_I"
	DOMESTICJ          ConnectorStandard = "DOMESTIC_J"
	DOMESTICK          ConnectorStandard = "DOMESTIC_K"
	DOMESTICL          ConnectorStandard = "DOMESTIC_L"
	GBTAC              ConnectorStandard = "GBT_AC"
	GBTDC              ConnectorStandard = "GBT_DC"
	IEC603092Single16  ConnectorStandard = "IEC_60309_2_single_16"
	IEC603092Three16   ConnectorStandard = "IEC_60309_2_three_16"
	IEC603092Three32   ConnectorStandard = "IEC_60309_2_three_32"
	IEC603092Three64   ConnectorStandard = "IEC_60309_2_three_64"
	IEC62196T1         ConnectorStandard = "IEC_62196_T1"
	IEC62196T1COMBO    ConnectorStandard = "IEC_62196_T1_COMBO"
	IEC62196T2         ConnectorStandard = "IEC_62196_T2"
	IEC62196T2COMBO    ConnectorStandard = "IEC_62196_T2_COMBO"
	IEC62196T3A        ConnectorStandard = "IEC_62196_T3A"
	IEC62196T3C        ConnectorStandard = "IEC_62196_T3C"
	NEMA1030           ConnectorStandard = "NEMA_10_30"
	NEMA1050           ConnectorStandard = "NEMA_10_50"
	NEMA1430           ConnectorStandard = "NEMA_14_30"
	NEMA1450           ConnectorStandard = "NEMA_14_50"
	NEMA520            ConnectorStandard = "NEMA_5_20"
	NEMA630            ConnectorStandard = "NEMA_6_30"
	NEMA650            ConnectorStandard = "NEMA_6_50"
	PANTOGRAPHBOTTOMUP ConnectorStandard = "PANTOGRAPH_BOTTOM_UP"
	PANTOGRAPHTOPDOWN  ConnectorStandard = "PANTOGRAPH_TOP_DOWN"
	TESLAR             ConnectorStandard = "TESLA_R"
	TESLAS             ConnectorStandard = "TESLA_S"
	UNKNOWN            ConnectorStandard = "UNKNOWN"
)

// Defines values for EvseStatus.
const (
	Available   EvseStatus = "Available"
	Charging    EvseStatus = "Charging"
	Faulted     EvseStatus = "Faulted"
	Finishing   EvseStatus = "Finishing"
	Occupied    EvseStatus = "Occupied"
	Reserved    EvseStatus = "Reserved"
	Unavailable EvseStatus = "Unavailable"
)

// Defines values for LocationParkingType.
const (
	ALONGMOTORWAY     LocationParkingType = "ALONG_MOTORWAY"
	ONDRIVEWAY        LocationParkingType = "ON_DRIVEWAY"
	ONSTREET          LocationParkingType = "ON_STREET"
	PARKINGGARAGE     LocationParkingType = "PARKING_GARAGE"
	PARKINGLOT        LocationParkingType = "PARKING_LOT"
	UNDERGROUNDGARAGE LocationParkingType = "UNDERGROUND_GARAGE"
)

// Defines values for RegistrationStatus.
const (
	PENDING    RegistrationStatus = "PENDING"
	REGISTERED RegistrationStatus = "REGISTERED"
)

// Defines values for TokenCacheMode.
const (
	ALLOWED        TokenCacheMode = "ALLOWED"
	ALLOWEDOFFLINE TokenCacheMode = "ALLOWED_OFFLINE"
	ALWAYS         TokenCacheMode = "ALWAYS"
	NEVER          TokenCacheMode = "NEVER"
)

// Defines values for TokenType.
const (
	ADHOCUSER TokenType = "AD_HOC_USER"
	APPUSER   TokenType = "APP_USER"
	OTHER     TokenType = "OTHER"
	RFID      TokenType = "RFID"
)

// Certificate A client certificate
type Certificate struct {
	// Certificate The PEM encoded certificate with newlines replaced by `\n`
	Certificate string `json:"certificate"`
}

// ChargeStation Represents a charge station.
type ChargeStation struct {
	// Base64SHA256Password The base64 encoded, SHA-256 hash of the charge station password
	Base64SHA256Password *string `json:"base64_SHA256_password,omitempty"`

	// Evses List of EVSEs available at the charge station.
	Evses *[]Evse `json:"evses"`

	// Id Unique identifier for the charge station.
	Id *string `json:"id,omitempty"`

	// InvalidUsernameAllowed If set to true then an invalid username will not prevent the charge station connecting
	InvalidUsernameAllowed *bool `json:"invalid_username_allowed,omitempty"`

	// LocationId Identifier for the location of the charge station.
	LocationId string `json:"location_id"`

	// SecurityProfile The security profile to use for the charge station: * `0` - unsecured transport with basic auth * `1` - TLS with basic auth * `2` - TLS with client certificate
	SecurityProfile int `json:"security_profile"`
}

// ChargeStationInstallCertificates The set of certificates to install on the charge station. The certificates will be sent
// to the charge station asynchronously.
type ChargeStationInstallCertificates struct {
	Certificates []struct {
		// Certificate The PEM encoded certificate with newlines replaced by `\n`
		Certificate string `json:"certificate"`

		// Status The status, defaults to Pending
		Status *ChargeStationInstallCertificatesCertificatesStatus `json:"status,omitempty"`
		Type   ChargeStationInstallCertificatesCertificatesType    `json:"type"`
	} `json:"certificates"`
}

// ChargeStationInstallCertificatesCertificatesStatus The status, defaults to Pending
type ChargeStationInstallCertificatesCertificatesStatus string

// ChargeStationInstallCertificatesCertificatesType defines model for ChargeStationInstallCertificates.Certificates.Type.
type ChargeStationInstallCertificatesCertificatesType string

// ChargeStationRuntimeDetails Represents charge station runtime details.
type ChargeStationRuntimeDetails struct {
	// OcppVersion OCPP version used with charge station.
	OcppVersion string `json:"ocpp_version"`
}

// ChargeStationSettings Settings for a charge station
type ChargeStationSettings map[string]string

// ChargeStationTrigger Trigger a charge station action
type ChargeStationTrigger struct {
	Trigger ChargeStationTriggerTrigger `json:"trigger"`
}

// ChargeStationTriggerTrigger defines model for ChargeStationTrigger.Trigger.
type ChargeStationTriggerTrigger string

// Connector defines model for Connector.
type Connector struct {
	Format ConnectorFormat `json:"format"`
	Id     string          `json:"id"`

	// LastUpdated The date the record was last updated (ignored on create/update)
	LastUpdated *time.Time         `json:"last_updated,omitempty"`
	MaxAmperage int32              `json:"max_amperage"`
	MaxVoltage  int32              `json:"max_voltage"`
	PowerType   ConnectorPowerType `json:"power_type"`
	Standard    ConnectorStandard  `json:"standard"`
}

// ConnectorFormat defines model for Connector.Format.
type ConnectorFormat string

// ConnectorPowerType defines model for Connector.PowerType.
type ConnectorPowerType string

// ConnectorStandard defines model for Connector.Standard.
type ConnectorStandard string

// Evse defines model for Evse.
type Evse struct {
	Connectors []Connector `json:"connectors"`
	EvseId     *string     `json:"evse_id"`

	// LastUpdated The date the record was last updated (ignored on create/update)
	LastUpdated *time.Time `json:"last_updated,omitempty"`

	// Status The current operational status of the EVSE.
	Status EvseStatus `json:"status"`

	// Uid Uniquely identifies the EVSE within the CPOs platform (and
	// suboperator platforms).
	Uid string `json:"uid"`
}

// EvseStatus The current operational status of the EVSE.
type EvseStatus string

// GeoLocation defines model for GeoLocation.
type GeoLocation struct {
	Latitude  string `json:"latitude"`
	Longitude string `json:"longitude"`
}

// Location A charge station location
type Location struct {
	Address     string               `json:"address"`
	City        string               `json:"city"`
	Coordinates GeoLocation          `json:"coordinates"`
	Country     string               `json:"country"`
	CountryCode string               `json:"country_code"`
	Id          *string              `json:"id,omitempty"`
	Name        *string              `json:"name"`
	ParkingType *LocationParkingType `json:"parking_type"`
	PartyId     string               `json:"party_id"`
	PostalCode  *string              `json:"postal_code"`
}

// LocationParkingType defines model for Location.ParkingType.
type LocationParkingType string

// MeterValue defines model for MeterValue.
type MeterValue struct {
	SampledValues []SampledValue `json:"sampled_values"`
	Timestamp     string         `json:"timestamp"`
}

// Registration Defines the initial connection details for the OCPI registration process
type Registration struct {
	// Status The status of the registration request. If the request is marked as `REGISTERED` then the token will be allowed to
	// be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as
	// `PENDING` then the token will only be allowed to access the `/ocpi/versions`, `/ocpi/2.2` and `/ocpi/2.2/credentials`
	// endpoints.
	Status *RegistrationStatus `json:"status,omitempty"`

	// Token The token to use for communicating with the eMSP (CREDENTIALS_TOKEN_A).
	Token string `json:"token"`

	// Url The URL of the eMSP versions endpoint. If provided the CSMS will act as the sender of the versions request.
	Url *string `json:"url,omitempty"`
}

// RegistrationStatus The status of the registration request. If the request is marked as `REGISTERED` then the token will be allowed to
// be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as
// `PENDING` then the token will only be allowed to access the `/ocpi/versions`, `/ocpi/2.2` and `/ocpi/2.2/credentials`
// endpoints.
type RegistrationStatus string

// SampledValue defines model for SampledValue.
type SampledValue struct {
	Context       *string        `json:"context"`
	Location      *string        `json:"location"`
	Measurand     *string        `json:"measurand"`
	Phase         *string        `json:"phase"`
	UnitOfMeasure *UnitOfMeasure `json:"unit_of_measure,omitempty"`
	Value         float32        `json:"value"`
}

// Status HTTP status
type Status struct {
	// Error The error details
	Error *string `json:"error,omitempty"`

	// Status The status description
	Status string `json:"status"`
}

// Token An authorization token
type Token struct {
	// CacheMode Indicates what type of token caching is allowed
	CacheMode TokenCacheMode `json:"cache_mode"`

	// ContractId The contract ID (eMAID) associated with the token (with optional component separators)
	ContractId string `json:"contract_id"`

	// CountryCode The country code of the issuing eMSP
	CountryCode string `json:"country_code"`

	// GroupId This id groups a couple of tokens to make two or more tokens work as one
	GroupId *string `json:"group_id,omitempty"`

	// Issuer Issuing company, most of the times the name of the company printed on the RFID card, not necessarily the eMSP
	Issuer string `json:"issuer"`

	// LanguageCode The preferred language to use encoded as ISO 639-1 language code
	LanguageCode *string `json:"language_code,omitempty"`

	// LastUpdated The date the record was last updated (ignored on create/update)
	LastUpdated *time.Time `json:"last_updated,omitempty"`

	// PartyId The party id of the issuing eMSP
	PartyId string `json:"party_id"`

	// Type The type of token
	Type TokenType `json:"type"`

	// Uid The unique token id
	Uid string `json:"uid"`

	// Valid Is this token valid
	Valid bool `json:"valid"`

	// VisualNumber The visual/readable number/identification printed on an RFID card
	VisualNumber *string `json:"visual_number,omitempty"`
}

// TokenCacheMode Indicates what type of token caching is allowed
type TokenCacheMode string

// TokenType The type of token
type TokenType string

// Transaction defines model for Transaction.
type Transaction struct {
	ChargeStationId   string       `json:"charge_station_id"`
	EndedSeqNo        int          `json:"ended_seq_no"`
	IdToken           string       `json:"id_token"`
	MeterValues       []MeterValue `json:"meter_values"`
	Offline           bool         `json:"offline"`
	StartSeqNo        int          `json:"start_seq_no"`
	TokenType         string       `json:"token_type"`
	TransactionId     string       `json:"transaction_id"`
	UpdatedSeqNoCount int          `json:"updated_seq_no_count"`
}

// UnitOfMeasure defines model for UnitOfMeasure.
type UnitOfMeasure struct {
	Multipler int    `json:"multipler"`
	Unit      string `json:"unit"`
}

// ListChargeStationsParams defines parameters for ListChargeStations.
type ListChargeStationsParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListLocationsParams defines parameters for ListLocations.
type ListLocationsParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListTokensParams defines parameters for ListTokens.
type ListTokensParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListTransactionsByChargeStationParams defines parameters for ListTransactionsByChargeStation.
type ListTransactionsByChargeStationParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// UploadCertificateJSONRequestBody defines body for UploadCertificate for application/json ContentType.
type UploadCertificateJSONRequestBody = Certificate

// RegisterChargeStationJSONRequestBody defines body for RegisterChargeStation for application/json ContentType.
type RegisterChargeStationJSONRequestBody = ChargeStation

// UpdateChargeStationJSONRequestBody defines body for UpdateChargeStation for application/json ContentType.
type UpdateChargeStationJSONRequestBody = ChargeStation

// InstallChargeStationCertificatesJSONRequestBody defines body for InstallChargeStationCertificates for application/json ContentType.
type InstallChargeStationCertificatesJSONRequestBody = ChargeStationInstallCertificates

// ReconfigureChargeStationJSONRequestBody defines body for ReconfigureChargeStation for application/json ContentType.
type ReconfigureChargeStationJSONRequestBody = ChargeStationSettings

// TriggerChargeStationJSONRequestBody defines body for TriggerChargeStation for application/json ContentType.
type TriggerChargeStationJSONRequestBody = ChargeStationTrigger

// RegisterLocationJSONRequestBody defines body for RegisterLocation for application/json ContentType.
type RegisterLocationJSONRequestBody = Location

// UpdateLocationJSONRequestBody defines body for UpdateLocation for application/json ContentType.
type UpdateLocationJSONRequestBody = Location

// RegisterPartyJSONRequestBody defines body for RegisterParty for application/json ContentType.
type RegisterPartyJSONRequestBody = Registration

// SetTokenJSONRequestBody defines body for SetToken for application/json ContentType.
type SetTokenJSONRequestBody = Token

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a certificate
	// (POST /certificate)
	UploadCertificate(w http.ResponseWriter, r *http.Request)
	// Delete a certificate
	// (DELETE /certificate/{certificate_hash})
	DeleteCertificate(w http.ResponseWriter, r *http.Request, certificateHash string)
	// Lookup a certificate
	// (GET /certificate/{certificate_hash})
	LookupCertificate(w http.ResponseWriter, r *http.Request, certificateHash string)
	// List Charge Stations
	// (GET /cs)
	ListChargeStations(w http.ResponseWriter, r *http.Request, params ListChargeStationsParams)
	// Register a new charge station
	// (POST /cs)
	RegisterChargeStation(w http.ResponseWriter, r *http.Request)
	// Delete Charge Station by ID
	// (DELETE /cs/{cs_id})
	DeleteChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// Get Charge Station by ID
	// (GET /cs/{cs_id})
	LookupChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// Update a charge station
	// (PUT /cs/{cs_id})
	UpdateChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// Install certificates on the charge station
	// (POST /cs/{cs_id}/certificates)
	InstallChargeStationCertificates(w http.ResponseWriter, r *http.Request, csId string)
	// Reconfigure the charge station
	// (POST /cs/{cs_id}/reconfigure)
	ReconfigureChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// Get Charge Station runtime details
	// (GET /cs/{cs_id}/runtime-details)
	LookupChargeStationRuntimeDetails(w http.ResponseWriter, r *http.Request, csId string)

	// (POST /cs/{cs_id}/trigger)
	TriggerChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// List locations
	// (GET /location)
	ListLocations(w http.ResponseWriter, r *http.Request, params ListLocationsParams)
	// Registers a location with the CSMS
	// (POST /location)
	RegisterLocation(w http.ResponseWriter, r *http.Request)
	// Delete a location by ID
	// (DELETE /location/{locationId})
	DeleteLocation(w http.ResponseWriter, r *http.Request, locationId string)
	// Lookup a location by ID
	// (GET /location/{locationId})
	LookupLocation(w http.ResponseWriter, r *http.Request, locationId string)
	// Update a location
	// (PUT /location/{locationId})
	UpdateLocation(w http.ResponseWriter, r *http.Request, locationId string)
	// Registers an OCPI party with the CSMS
	// (POST /register)
	RegisterParty(w http.ResponseWriter, r *http.Request)
	// List authorization tokens
	// (GET /token)
	ListTokens(w http.ResponseWriter, r *http.Request, params ListTokensParams)
	// Create/update an authorization token
	// (POST /token)
	SetToken(w http.ResponseWriter, r *http.Request)
	// Lookup an authorization token
	// (GET /token/{token_uid})
	LookupToken(w http.ResponseWriter, r *http.Request, tokenUid string)
	// List transactions by charge station
	// (GET /transactions/{cs_id})
	ListTransactionsByChargeStation(w http.ResponseWriter, r *http.Request, csId string, params ListTransactionsByChargeStationParams)
	// Find a transaction
	// (GET /transactions/{cs_id}/{transaction_id})
	LookupTransaction(w http.ResponseWriter, r *http.Request, csId string, transactionId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Upload a certificate
// (POST /certificate)
func (_ Unimplemented) UploadCertificate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a certificate
// (DELETE /certificate/{certificate_hash})
func (_ Unimplemented) DeleteCertificate(w http.ResponseWriter, r *http.Request, certificateHash string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lookup a certificate
// (GET /certificate/{certificate_hash})
func (_ Unimplemented) LookupCertificate(w http.ResponseWriter, r *http.Request, certificateHash string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Charge Stations
// (GET /cs)
func (_ Unimplemented) ListChargeStations(w http.ResponseWriter, r *http.Request, params ListChargeStationsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new charge station
// (POST /cs)
func (_ Unimplemented) RegisterChargeStation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Charge Station by ID
// (DELETE /cs/{cs_id})
func (_ Unimplemented) DeleteChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Charge Station by ID
// (GET /cs/{cs_id})
func (_ Unimplemented) LookupChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a charge station
// (PUT /cs/{cs_id})
func (_ Unimplemented) UpdateChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Install certificates on the charge station
// (POST /cs/{cs_id}/certificates)
func (_ Unimplemented) InstallChargeStationCertificates(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reconfigure the charge station
// (POST /cs/{cs_id}/reconfigure)
func (_ Unimplemented) ReconfigureChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Charge Station runtime details
// (GET /cs/{cs_id}/runtime-details)
func (_ Unimplemented) LookupChargeStationRuntimeDetails(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /cs/{cs_id}/trigger)
func (_ Unimplemented) TriggerChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List locations
// (GET /location)
func (_ Unimplemented) ListLocations(w http.ResponseWriter, r *http.Request, params ListLocationsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Registers a location with the CSMS
// (POST /location)
func (_ Unimplemented) RegisterLocation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a location by ID
// (DELETE /location/{locationId})
func (_ Unimplemented) DeleteLocation(w http.ResponseWriter, r *http.Request, locationId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lookup a location by ID
// (GET /location/{locationId})
func (_ Unimplemented) LookupLocation(w http.ResponseWriter, r *http.Request, locationId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a location
// (PUT /location/{locationId})
func (_ Unimplemented) UpdateLocation(w http.ResponseWriter, r *http.Request, locationId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Registers an OCPI party with the CSMS
// (POST /register)
func (_ Unimplemented) RegisterParty(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List authorization tokens
// (GET /token)
func (_ Unimplemented) ListTokens(w http.ResponseWriter, r *http.Request, params ListTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create/update an authorization token
// (POST /token)
func (_ Unimplemented) SetToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lookup an authorization token
// (GET /token/{token_uid})
func (_ Unimplemented) LookupToken(w http.ResponseWriter, r *http.Request, tokenUid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List transactions by charge station
// (GET /transactions/{cs_id})
func (_ Unimplemented) ListTransactionsByChargeStation(w http.ResponseWriter, r *http.Request, csId string, params ListTransactionsByChargeStationParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a transaction
// (GET /transactions/{cs_id}/{transaction_id})
func (_ Unimplemented) LookupTransaction(w http.ResponseWriter, r *http.Request, csId string, transactionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UploadCertificate operation middleware
func (siw *ServerInterfaceWrapper) UploadCertificate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadCertificate(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCertificate operation middleware
func (siw *ServerInterfaceWrapper) DeleteCertificate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "certificate_hash" -------------
	var certificateHash string

	err = runtime.BindStyledParameterWithOptions("simple", "certificate_hash", chi.URLParam(r, "certificate_hash"), &certificateHash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "certificate_hash", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCertificate(w, r, certificateHash)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupCertificate operation middleware
func (siw *ServerInterfaceWrapper) LookupCertificate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "certificate_hash" -------------
	var certificateHash string

	err = runtime.BindStyledParameterWithOptions("simple", "certificate_hash", chi.URLParam(r, "certificate_hash"), &certificateHash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "certificate_hash", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupCertificate(w, r, certificateHash)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListChargeStations operation middleware
func (siw *ServerInterfaceWrapper) ListChargeStations(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListChargeStationsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListChargeStations(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterChargeStation operation middleware
func (siw *ServerInterfaceWrapper) RegisterChargeStation(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterChargeStation(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteChargeStation operation middleware
func (siw *ServerInterfaceWrapper) DeleteChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupChargeStation operation middleware
func (siw *ServerInterfaceWrapper) LookupChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateChargeStation operation middleware
func (siw *ServerInterfaceWrapper) UpdateChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// InstallChargeStationCertificates operation middleware
func (siw *ServerInterfaceWrapper) InstallChargeStationCertificates(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InstallChargeStationCertificates(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ReconfigureChargeStation operation middleware
func (siw *ServerInterfaceWrapper) ReconfigureChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReconfigureChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupChargeStationRuntimeDetails operation middleware
func (siw *ServerInterfaceWrapper) LookupChargeStationRuntimeDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupChargeStationRuntimeDetails(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TriggerChargeStation operation middleware
func (siw *ServerInterfaceWrapper) TriggerChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TriggerChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListLocations operation middleware
func (siw *ServerInterfaceWrapper) ListLocations(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLocationsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLocations(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterLocation operation middleware
func (siw *ServerInterfaceWrapper) RegisterLocation(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterLocation(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteLocation operation middleware
func (siw *ServerInterfaceWrapper) DeleteLocation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "locationId" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "locationId", chi.URLParam(r, "locationId"), &locationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "locationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLocation(w, r, locationId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupLocation operation middleware
func (siw *ServerInterfaceWrapper) LookupLocation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "locationId" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "locationId", chi.URLParam(r, "locationId"), &locationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "locationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupLocation(w, r, locationId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateLocation operation middleware
func (siw *ServerInterfaceWrapper) UpdateLocation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "locationId" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "locationId", chi.URLParam(r, "locationId"), &locationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "locationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLocation(w, r, locationId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterParty operation middleware
func (siw *ServerInterfaceWrapper) RegisterParty(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterParty(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTokens operation middleware
func (siw *ServerInterfaceWrapper) ListTokens(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTokensParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SetToken operation middleware
func (siw *ServerInterfaceWrapper) SetToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupToken operation middleware
func (siw *ServerInterfaceWrapper) LookupToken(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "token_uid" -------------
	var tokenUid string

	err = runtime.BindStyledParameterWithOptions("simple", "token_uid", chi.URLParam(r, "token_uid"), &tokenUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token_uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupToken(w, r, tokenUid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTransactionsByChargeStation operation middleware
func (siw *ServerInterfaceWrapper) ListTransactionsByChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransactionsByChargeStationParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTransactionsByChargeStation(w, r, csId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupTransaction operation middleware
func (siw *ServerInterfaceWrapper) LookupTransaction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId string

	err = runtime.BindStyledParameterWithOptions("simple", "transaction_id", chi.URLParam(r, "transaction_id"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "transaction_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupTransaction(w, r, csId, transactionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/certificate", wrapper.UploadCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/certificate/{certificate_hash}", wrapper.DeleteCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/certificate/{certificate_hash}", wrapper.LookupCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cs", wrapper.ListChargeStations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs", wrapper.RegisterChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/cs/{cs_id}", wrapper.DeleteChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cs/{cs_id}", wrapper.LookupChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/cs/{cs_id}", wrapper.UpdateChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs/{cs_id}/certificates", wrapper.InstallChargeStationCertificates)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs/{cs_id}/reconfigure", wrapper.ReconfigureChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cs/{cs_id}/runtime-details", wrapper.LookupChargeStationRuntimeDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs/{cs_id}/trigger", wrapper.TriggerChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/location", wrapper.ListLocations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/location", wrapper.RegisterLocation)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/location/{locationId}", wrapper.DeleteLocation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/location/{locationId}", wrapper.LookupLocation)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/location/{locationId}", wrapper.UpdateLocation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.RegisterParty)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/token", wrapper.ListTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/token", wrapper.SetToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/token/{token_uid}", wrapper.LookupToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/transactions/{cs_id}", wrapper.ListTransactionsByChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/transactions/{cs_id}/{transaction_id}", wrapper.LookupTransaction)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"nhNRHvLTy78DAAD//yc38NdmZAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
