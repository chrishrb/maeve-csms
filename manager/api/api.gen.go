// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ChargeStationInstallCertificatesCertificatesStatus.
const (
	Accepted ChargeStationInstallCertificatesCertificatesStatus = "Accepted"
	Pending  ChargeStationInstallCertificatesCertificatesStatus = "Pending"
	Rejected ChargeStationInstallCertificatesCertificatesStatus = "Rejected"
)

// Defines values for ChargeStationInstallCertificatesCertificatesType.
const (
	CSMS ChargeStationInstallCertificatesCertificatesType = "CSMS"
	MF   ChargeStationInstallCertificatesCertificatesType = "MF"
	MO   ChargeStationInstallCertificatesCertificatesType = "MO"
	V2G  ChargeStationInstallCertificatesCertificatesType = "V2G"
)

// Defines values for ChargeStationTriggerTrigger.
const (
	BootNotification               ChargeStationTriggerTrigger = "BootNotification"
	SignChargingStationCertificate ChargeStationTriggerTrigger = "SignChargingStationCertificate"
	SignCombinedCertificate        ChargeStationTriggerTrigger = "SignCombinedCertificate"
	SignV2GCertificate             ChargeStationTriggerTrigger = "SignV2GCertificate"
	StatusNotification             ChargeStationTriggerTrigger = "StatusNotification"
)

// Defines values for ConnectorFormat.
const (
	CABLE  ConnectorFormat = "CABLE"
	SOCKET ConnectorFormat = "SOCKET"
)

// Defines values for ConnectorPowerType.
const (
	AC1PHASE ConnectorPowerType = "AC_1_PHASE"
	AC3PHASE ConnectorPowerType = "AC_3_PHASE"
	DC       ConnectorPowerType = "DC"
)

// Defines values for ConnectorStandard.
const (
	CHADEMO            ConnectorStandard = "CHADEMO"
	CHAOJI             ConnectorStandard = "CHAOJI"
	DOMESTICA          ConnectorStandard = "DOMESTIC_A"
	DOMESTICB          ConnectorStandard = "DOMESTIC_B"
	DOMESTICC          ConnectorStandard = "DOMESTIC_C"
	DOMESTICD          ConnectorStandard = "DOMESTIC_D"
	DOMESTICE          ConnectorStandard = "DOMESTIC_E"
	DOMESTICF          ConnectorStandard = "DOMESTIC_F"
	DOMESTICG          ConnectorStandard = "DOMESTIC_G"
	DOMESTICH          ConnectorStandard = "DOMESTIC_H"
	DOMESTICI          ConnectorStandard = "DOMESTIC_I"
	DOMESTICJ          ConnectorStandard = "DOMESTIC_J"
	DOMESTICK          ConnectorStandard = "DOMESTIC_K"
	DOMESTICL          ConnectorStandard = "DOMESTIC_L"
	GBTAC              ConnectorStandard = "GBT_AC"
	GBTDC              ConnectorStandard = "GBT_DC"
	IEC603092Single16  ConnectorStandard = "IEC_60309_2_single_16"
	IEC603092Three16   ConnectorStandard = "IEC_60309_2_three_16"
	IEC603092Three32   ConnectorStandard = "IEC_60309_2_three_32"
	IEC603092Three64   ConnectorStandard = "IEC_60309_2_three_64"
	IEC62196T1         ConnectorStandard = "IEC_62196_T1"
	IEC62196T1COMBO    ConnectorStandard = "IEC_62196_T1_COMBO"
	IEC62196T2         ConnectorStandard = "IEC_62196_T2"
	IEC62196T2COMBO    ConnectorStandard = "IEC_62196_T2_COMBO"
	IEC62196T3A        ConnectorStandard = "IEC_62196_T3A"
	IEC62196T3C        ConnectorStandard = "IEC_62196_T3C"
	NEMA1030           ConnectorStandard = "NEMA_10_30"
	NEMA1050           ConnectorStandard = "NEMA_10_50"
	NEMA1430           ConnectorStandard = "NEMA_14_30"
	NEMA1450           ConnectorStandard = "NEMA_14_50"
	NEMA520            ConnectorStandard = "NEMA_5_20"
	NEMA630            ConnectorStandard = "NEMA_6_30"
	NEMA650            ConnectorStandard = "NEMA_6_50"
	PANTOGRAPHBOTTOMUP ConnectorStandard = "PANTOGRAPH_BOTTOM_UP"
	PANTOGRAPHTOPDOWN  ConnectorStandard = "PANTOGRAPH_TOP_DOWN"
	TESLAR             ConnectorStandard = "TESLA_R"
	TESLAS             ConnectorStandard = "TESLA_S"
	UNKNOWN            ConnectorStandard = "UNKNOWN"
)

// Defines values for EvseStatus.
const (
	Available   EvseStatus = "Available"
	Charging    EvseStatus = "Charging"
	Faulted     EvseStatus = "Faulted"
	Finishing   EvseStatus = "Finishing"
	Occupied    EvseStatus = "Occupied"
	Reserved    EvseStatus = "Reserved"
	Unavailable EvseStatus = "Unavailable"
)

// Defines values for LocationParkingType.
const (
	ALONGMOTORWAY     LocationParkingType = "ALONG_MOTORWAY"
	ONDRIVEWAY        LocationParkingType = "ON_DRIVEWAY"
	ONSTREET          LocationParkingType = "ON_STREET"
	PARKINGGARAGE     LocationParkingType = "PARKING_GARAGE"
	PARKINGLOT        LocationParkingType = "PARKING_LOT"
	UNDERGROUNDGARAGE LocationParkingType = "UNDERGROUND_GARAGE"
)

// Defines values for RegistrationStatus.
const (
	PENDING    RegistrationStatus = "PENDING"
	REGISTERED RegistrationStatus = "REGISTERED"
)

// Defines values for TokenCacheMode.
const (
	ALLOWED        TokenCacheMode = "ALLOWED"
	ALLOWEDOFFLINE TokenCacheMode = "ALLOWED_OFFLINE"
	ALWAYS         TokenCacheMode = "ALWAYS"
	NEVER          TokenCacheMode = "NEVER"
)

// Defines values for TokenType.
const (
	ADHOCUSER TokenType = "AD_HOC_USER"
	APPUSER   TokenType = "APP_USER"
	OTHER     TokenType = "OTHER"
	RFID      TokenType = "RFID"
)

// Certificate A client certificate
type Certificate struct {
	// Certificate The PEM encoded certificate with newlines replaced by `\n`
	Certificate string `json:"certificate"`
}

// ChargeStation Represents a charge station.
type ChargeStation struct {
	// Base64SHA256Password The base64 encoded, SHA-256 hash of the charge station password
	Base64SHA256Password *string `json:"base64_SHA256_password,omitempty"`

	// Evses List of EVSEs available at the charge station.
	Evses *[]Evse `json:"evses"`

	// Id Unique identifier for the charge station.
	Id *string `json:"id,omitempty"`

	// InvalidUsernameAllowed If set to true then an invalid username will not prevent the charge station connecting
	InvalidUsernameAllowed *bool `json:"invalid_username_allowed,omitempty"`

	// LocationId Identifier for the location of the charge station.
	LocationId string `json:"location_id"`

	// SecurityProfile The security profile to use for the charge station: * `0` - unsecured transport with basic auth * `1` - TLS with basic auth * `2` - TLS with client certificate
	SecurityProfile int `json:"security_profile"`
}

// ChargeStationInstallCertificates The set of certificates to install on the charge station. The certificates will be sent
// to the charge station asynchronously.
type ChargeStationInstallCertificates struct {
	Certificates []struct {
		// Certificate The PEM encoded certificate with newlines replaced by `\n`
		Certificate string `json:"certificate"`

		// Status The status, defaults to Pending
		Status *ChargeStationInstallCertificatesCertificatesStatus `json:"status,omitempty"`
		Type   ChargeStationInstallCertificatesCertificatesType    `json:"type"`
	} `json:"certificates"`
}

// ChargeStationInstallCertificatesCertificatesStatus The status, defaults to Pending
type ChargeStationInstallCertificatesCertificatesStatus string

// ChargeStationInstallCertificatesCertificatesType defines model for ChargeStationInstallCertificates.Certificates.Type.
type ChargeStationInstallCertificatesCertificatesType string

// ChargeStationSettings Settings for a charge station
type ChargeStationSettings map[string]string

// ChargeStationTrigger Trigger a charge station action
type ChargeStationTrigger struct {
	Trigger ChargeStationTriggerTrigger `json:"trigger"`
}

// ChargeStationTriggerTrigger defines model for ChargeStationTrigger.Trigger.
type ChargeStationTriggerTrigger string

// Connector defines model for Connector.
type Connector struct {
	Format ConnectorFormat `json:"format"`
	Id     string          `json:"id"`

	// LastUpdated The date the record was last updated (ignored on create/update)
	LastUpdated *time.Time         `json:"last_updated,omitempty"`
	MaxAmperage int32              `json:"max_amperage"`
	MaxVoltage  int32              `json:"max_voltage"`
	PowerType   ConnectorPowerType `json:"power_type"`
	Standard    ConnectorStandard  `json:"standard"`
}

// ConnectorFormat defines model for Connector.Format.
type ConnectorFormat string

// ConnectorPowerType defines model for Connector.PowerType.
type ConnectorPowerType string

// ConnectorStandard defines model for Connector.Standard.
type ConnectorStandard string

// Evse defines model for Evse.
type Evse struct {
	Connectors []Connector `json:"connectors"`
	EvseId     *string     `json:"evse_id"`

	// LastUpdated The date the record was last updated (ignored on create/update)
	LastUpdated *time.Time `json:"last_updated,omitempty"`

	// Status The current operational status of the EVSE.
	Status EvseStatus `json:"status"`

	// Uid Uniquely identifies the EVSE within the CPOs platform (and
	// suboperator platforms).
	Uid string `json:"uid"`
}

// EvseStatus The current operational status of the EVSE.
type EvseStatus string

// GeoLocation defines model for GeoLocation.
type GeoLocation struct {
	Latitude  string `json:"latitude"`
	Longitude string `json:"longitude"`
}

// Location A charge station location
type Location struct {
	Address     string               `json:"address"`
	City        string               `json:"city"`
	Coordinates GeoLocation          `json:"coordinates"`
	Country     string               `json:"country"`
	CountryCode string               `json:"country_code"`
	Id          *string              `json:"id,omitempty"`
	Name        *string              `json:"name"`
	ParkingType *LocationParkingType `json:"parking_type"`
	PartyId     string               `json:"party_id"`
	PostalCode  *string              `json:"postal_code"`
}

// LocationParkingType defines model for Location.ParkingType.
type LocationParkingType string

// MeterValue defines model for MeterValue.
type MeterValue struct {
	SampledValues []SampledValue `json:"sampled_values"`
	Timestamp     string         `json:"timestamp"`
}

// Registration Defines the initial connection details for the OCPI registration process
type Registration struct {
	// Status The status of the registration request. If the request is marked as `REGISTERED` then the token will be allowed to
	// be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as
	// `PENDING` then the token will only be allowed to access the `/ocpi/versions`, `/ocpi/2.2` and `/ocpi/2.2/credentials`
	// endpoints.
	Status *RegistrationStatus `json:"status,omitempty"`

	// Token The token to use for communicating with the eMSP (CREDENTIALS_TOKEN_A).
	Token string `json:"token"`

	// Url The URL of the eMSP versions endpoint. If provided the CSMS will act as the sender of the versions request.
	Url *string `json:"url,omitempty"`
}

// RegistrationStatus The status of the registration request. If the request is marked as `REGISTERED` then the token will be allowed to
// be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as
// `PENDING` then the token will only be allowed to access the `/ocpi/versions`, `/ocpi/2.2` and `/ocpi/2.2/credentials`
// endpoints.
type RegistrationStatus string

// SampledValue defines model for SampledValue.
type SampledValue struct {
	Context       *string        `json:"context"`
	Location      *string        `json:"location"`
	Measurand     *string        `json:"measurand"`
	Phase         *string        `json:"phase"`
	UnitOfMeasure *UnitOfMeasure `json:"unit_of_measure,omitempty"`
	Value         float32        `json:"value"`
}

// Status HTTP status
type Status struct {
	// Error The error details
	Error *string `json:"error,omitempty"`

	// Status The status description
	Status string `json:"status"`
}

// Token An authorization token
type Token struct {
	// CacheMode Indicates what type of token caching is allowed
	CacheMode TokenCacheMode `json:"cache_mode"`

	// ContractId The contract ID (eMAID) associated with the token (with optional component separators)
	ContractId string `json:"contract_id"`

	// CountryCode The country code of the issuing eMSP
	CountryCode string `json:"country_code"`

	// GroupId This id groups a couple of tokens to make two or more tokens work as one
	GroupId *string `json:"group_id,omitempty"`

	// Issuer Issuing company, most of the times the name of the company printed on the RFID card, not necessarily the eMSP
	Issuer string `json:"issuer"`

	// LanguageCode The preferred language to use encoded as ISO 639-1 language code
	LanguageCode *string `json:"language_code,omitempty"`

	// LastUpdated The date the record was last updated (ignored on create/update)
	LastUpdated *time.Time `json:"last_updated,omitempty"`

	// PartyId The party id of the issuing eMSP
	PartyId string `json:"party_id"`

	// Type The type of token
	Type TokenType `json:"type"`

	// Uid The unique token id
	Uid string `json:"uid"`

	// Valid Is this token valid
	Valid bool `json:"valid"`

	// VisualNumber The visual/readable number/identification printed on an RFID card
	VisualNumber *string `json:"visual_number,omitempty"`
}

// TokenCacheMode Indicates what type of token caching is allowed
type TokenCacheMode string

// TokenType The type of token
type TokenType string

// Transaction defines model for Transaction.
type Transaction struct {
	ChargeStationId   string       `json:"charge_station_id"`
	EndedSeqNo        int          `json:"ended_seq_no"`
	IdToken           string       `json:"id_token"`
	MeterValues       []MeterValue `json:"meter_values"`
	Offline           bool         `json:"offline"`
	StartSeqNo        int          `json:"start_seq_no"`
	TokenType         string       `json:"token_type"`
	TransactionId     string       `json:"transaction_id"`
	UpdatedSeqNoCount int          `json:"updated_seq_no_count"`
}

// UnitOfMeasure defines model for UnitOfMeasure.
type UnitOfMeasure struct {
	Multipler int    `json:"multipler"`
	Unit      string `json:"unit"`
}

// ListChargeStationsParams defines parameters for ListChargeStations.
type ListChargeStationsParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListLocationsParams defines parameters for ListLocations.
type ListLocationsParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListTokensParams defines parameters for ListTokens.
type ListTokensParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListTransactionsByChargeStationParams defines parameters for ListTransactionsByChargeStation.
type ListTransactionsByChargeStationParams struct {
	// Offset The number of items to skip before starting to collect the result set.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// UploadCertificateJSONRequestBody defines body for UploadCertificate for application/json ContentType.
type UploadCertificateJSONRequestBody = Certificate

// RegisterChargeStationJSONRequestBody defines body for RegisterChargeStation for application/json ContentType.
type RegisterChargeStationJSONRequestBody = ChargeStation

// UpdateChargeStationJSONRequestBody defines body for UpdateChargeStation for application/json ContentType.
type UpdateChargeStationJSONRequestBody = ChargeStation

// InstallChargeStationCertificatesJSONRequestBody defines body for InstallChargeStationCertificates for application/json ContentType.
type InstallChargeStationCertificatesJSONRequestBody = ChargeStationInstallCertificates

// ReconfigureChargeStationJSONRequestBody defines body for ReconfigureChargeStation for application/json ContentType.
type ReconfigureChargeStationJSONRequestBody = ChargeStationSettings

// TriggerChargeStationJSONRequestBody defines body for TriggerChargeStation for application/json ContentType.
type TriggerChargeStationJSONRequestBody = ChargeStationTrigger

// RegisterLocationJSONRequestBody defines body for RegisterLocation for application/json ContentType.
type RegisterLocationJSONRequestBody = Location

// UpdateLocationJSONRequestBody defines body for UpdateLocation for application/json ContentType.
type UpdateLocationJSONRequestBody = Location

// RegisterPartyJSONRequestBody defines body for RegisterParty for application/json ContentType.
type RegisterPartyJSONRequestBody = Registration

// SetTokenJSONRequestBody defines body for SetToken for application/json ContentType.
type SetTokenJSONRequestBody = Token

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a certificate
	// (POST /certificate)
	UploadCertificate(w http.ResponseWriter, r *http.Request)
	// Delete a certificate
	// (DELETE /certificate/{certificate_hash})
	DeleteCertificate(w http.ResponseWriter, r *http.Request, certificateHash string)
	// Lookup a certificate
	// (GET /certificate/{certificate_hash})
	LookupCertificate(w http.ResponseWriter, r *http.Request, certificateHash string)
	// List Charge Stations
	// (GET /cs)
	ListChargeStations(w http.ResponseWriter, r *http.Request, params ListChargeStationsParams)
	// Register a new charge station
	// (POST /cs)
	RegisterChargeStation(w http.ResponseWriter, r *http.Request)
	// Delete Charge Station by ID
	// (DELETE /cs/{cs_id})
	DeleteChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// Get Charge Station by ID
	// (GET /cs/{cs_id})
	LookupChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// Update a charge station
	// (PUT /cs/{cs_id})
	UpdateChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// Install certificates on the charge station
	// (POST /cs/{cs_id}/certificates)
	InstallChargeStationCertificates(w http.ResponseWriter, r *http.Request, csId string)
	// Reconfigure the charge station
	// (POST /cs/{cs_id}/reconfigure)
	ReconfigureChargeStation(w http.ResponseWriter, r *http.Request, csId string)

	// (POST /cs/{cs_id}/trigger)
	TriggerChargeStation(w http.ResponseWriter, r *http.Request, csId string)
	// List locations
	// (GET /location)
	ListLocations(w http.ResponseWriter, r *http.Request, params ListLocationsParams)
	// Registers a location with the CSMS
	// (POST /location)
	RegisterLocation(w http.ResponseWriter, r *http.Request)
	// Delete a location by ID
	// (DELETE /location/{locationId})
	DeleteLocation(w http.ResponseWriter, r *http.Request, locationId string)
	// Lookup a location by ID
	// (GET /location/{locationId})
	LookupLocation(w http.ResponseWriter, r *http.Request, locationId string)
	// Update a location
	// (PUT /location/{locationId})
	UpdateLocation(w http.ResponseWriter, r *http.Request, locationId string)
	// Registers an OCPI party with the CSMS
	// (POST /register)
	RegisterParty(w http.ResponseWriter, r *http.Request)
	// List authorization tokens
	// (GET /token)
	ListTokens(w http.ResponseWriter, r *http.Request, params ListTokensParams)
	// Create/update an authorization token
	// (POST /token)
	SetToken(w http.ResponseWriter, r *http.Request)
	// Lookup an authorization token
	// (GET /token/{token_uid})
	LookupToken(w http.ResponseWriter, r *http.Request, tokenUid string)
	// List transactions by charge station
	// (GET /transactions/{cs_id})
	ListTransactionsByChargeStation(w http.ResponseWriter, r *http.Request, csId string, params ListTransactionsByChargeStationParams)
	// Find a transaction
	// (GET /transactions/{cs_id}/{transaction_id})
	LookupTransaction(w http.ResponseWriter, r *http.Request, csId string, transactionId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Upload a certificate
// (POST /certificate)
func (_ Unimplemented) UploadCertificate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a certificate
// (DELETE /certificate/{certificate_hash})
func (_ Unimplemented) DeleteCertificate(w http.ResponseWriter, r *http.Request, certificateHash string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lookup a certificate
// (GET /certificate/{certificate_hash})
func (_ Unimplemented) LookupCertificate(w http.ResponseWriter, r *http.Request, certificateHash string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Charge Stations
// (GET /cs)
func (_ Unimplemented) ListChargeStations(w http.ResponseWriter, r *http.Request, params ListChargeStationsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new charge station
// (POST /cs)
func (_ Unimplemented) RegisterChargeStation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Charge Station by ID
// (DELETE /cs/{cs_id})
func (_ Unimplemented) DeleteChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Charge Station by ID
// (GET /cs/{cs_id})
func (_ Unimplemented) LookupChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a charge station
// (PUT /cs/{cs_id})
func (_ Unimplemented) UpdateChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Install certificates on the charge station
// (POST /cs/{cs_id}/certificates)
func (_ Unimplemented) InstallChargeStationCertificates(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reconfigure the charge station
// (POST /cs/{cs_id}/reconfigure)
func (_ Unimplemented) ReconfigureChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /cs/{cs_id}/trigger)
func (_ Unimplemented) TriggerChargeStation(w http.ResponseWriter, r *http.Request, csId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List locations
// (GET /location)
func (_ Unimplemented) ListLocations(w http.ResponseWriter, r *http.Request, params ListLocationsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Registers a location with the CSMS
// (POST /location)
func (_ Unimplemented) RegisterLocation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a location by ID
// (DELETE /location/{locationId})
func (_ Unimplemented) DeleteLocation(w http.ResponseWriter, r *http.Request, locationId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lookup a location by ID
// (GET /location/{locationId})
func (_ Unimplemented) LookupLocation(w http.ResponseWriter, r *http.Request, locationId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a location
// (PUT /location/{locationId})
func (_ Unimplemented) UpdateLocation(w http.ResponseWriter, r *http.Request, locationId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Registers an OCPI party with the CSMS
// (POST /register)
func (_ Unimplemented) RegisterParty(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List authorization tokens
// (GET /token)
func (_ Unimplemented) ListTokens(w http.ResponseWriter, r *http.Request, params ListTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create/update an authorization token
// (POST /token)
func (_ Unimplemented) SetToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Lookup an authorization token
// (GET /token/{token_uid})
func (_ Unimplemented) LookupToken(w http.ResponseWriter, r *http.Request, tokenUid string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List transactions by charge station
// (GET /transactions/{cs_id})
func (_ Unimplemented) ListTransactionsByChargeStation(w http.ResponseWriter, r *http.Request, csId string, params ListTransactionsByChargeStationParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a transaction
// (GET /transactions/{cs_id}/{transaction_id})
func (_ Unimplemented) LookupTransaction(w http.ResponseWriter, r *http.Request, csId string, transactionId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UploadCertificate operation middleware
func (siw *ServerInterfaceWrapper) UploadCertificate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadCertificate(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteCertificate operation middleware
func (siw *ServerInterfaceWrapper) DeleteCertificate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "certificate_hash" -------------
	var certificateHash string

	err = runtime.BindStyledParameterWithOptions("simple", "certificate_hash", chi.URLParam(r, "certificate_hash"), &certificateHash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "certificate_hash", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCertificate(w, r, certificateHash)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupCertificate operation middleware
func (siw *ServerInterfaceWrapper) LookupCertificate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "certificate_hash" -------------
	var certificateHash string

	err = runtime.BindStyledParameterWithOptions("simple", "certificate_hash", chi.URLParam(r, "certificate_hash"), &certificateHash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "certificate_hash", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupCertificate(w, r, certificateHash)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListChargeStations operation middleware
func (siw *ServerInterfaceWrapper) ListChargeStations(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListChargeStationsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListChargeStations(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterChargeStation operation middleware
func (siw *ServerInterfaceWrapper) RegisterChargeStation(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterChargeStation(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteChargeStation operation middleware
func (siw *ServerInterfaceWrapper) DeleteChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupChargeStation operation middleware
func (siw *ServerInterfaceWrapper) LookupChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateChargeStation operation middleware
func (siw *ServerInterfaceWrapper) UpdateChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// InstallChargeStationCertificates operation middleware
func (siw *ServerInterfaceWrapper) InstallChargeStationCertificates(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InstallChargeStationCertificates(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ReconfigureChargeStation operation middleware
func (siw *ServerInterfaceWrapper) ReconfigureChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReconfigureChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TriggerChargeStation operation middleware
func (siw *ServerInterfaceWrapper) TriggerChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TriggerChargeStation(w, r, csId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListLocations operation middleware
func (siw *ServerInterfaceWrapper) ListLocations(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLocationsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLocations(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterLocation operation middleware
func (siw *ServerInterfaceWrapper) RegisterLocation(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterLocation(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteLocation operation middleware
func (siw *ServerInterfaceWrapper) DeleteLocation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "locationId" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "locationId", chi.URLParam(r, "locationId"), &locationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "locationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLocation(w, r, locationId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupLocation operation middleware
func (siw *ServerInterfaceWrapper) LookupLocation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "locationId" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "locationId", chi.URLParam(r, "locationId"), &locationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "locationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupLocation(w, r, locationId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateLocation operation middleware
func (siw *ServerInterfaceWrapper) UpdateLocation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "locationId" -------------
	var locationId string

	err = runtime.BindStyledParameterWithOptions("simple", "locationId", chi.URLParam(r, "locationId"), &locationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "locationId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLocation(w, r, locationId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterParty operation middleware
func (siw *ServerInterfaceWrapper) RegisterParty(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterParty(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTokens operation middleware
func (siw *ServerInterfaceWrapper) ListTokens(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTokensParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SetToken operation middleware
func (siw *ServerInterfaceWrapper) SetToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupToken operation middleware
func (siw *ServerInterfaceWrapper) LookupToken(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "token_uid" -------------
	var tokenUid string

	err = runtime.BindStyledParameterWithOptions("simple", "token_uid", chi.URLParam(r, "token_uid"), &tokenUid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token_uid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupToken(w, r, tokenUid)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTransactionsByChargeStation operation middleware
func (siw *ServerInterfaceWrapper) ListTransactionsByChargeStation(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransactionsByChargeStationParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTransactionsByChargeStation(w, r, csId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupTransaction operation middleware
func (siw *ServerInterfaceWrapper) LookupTransaction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "cs_id" -------------
	var csId string

	err = runtime.BindStyledParameterWithOptions("simple", "cs_id", chi.URLParam(r, "cs_id"), &csId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cs_id", Err: err})
		return
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId string

	err = runtime.BindStyledParameterWithOptions("simple", "transaction_id", chi.URLParam(r, "transaction_id"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "transaction_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupTransaction(w, r, csId, transactionId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/certificate", wrapper.UploadCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/certificate/{certificate_hash}", wrapper.DeleteCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/certificate/{certificate_hash}", wrapper.LookupCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cs", wrapper.ListChargeStations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs", wrapper.RegisterChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/cs/{cs_id}", wrapper.DeleteChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/cs/{cs_id}", wrapper.LookupChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/cs/{cs_id}", wrapper.UpdateChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs/{cs_id}/certificates", wrapper.InstallChargeStationCertificates)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs/{cs_id}/reconfigure", wrapper.ReconfigureChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/cs/{cs_id}/trigger", wrapper.TriggerChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/location", wrapper.ListLocations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/location", wrapper.RegisterLocation)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/location/{locationId}", wrapper.DeleteLocation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/location/{locationId}", wrapper.LookupLocation)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/location/{locationId}", wrapper.UpdateLocation)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.RegisterParty)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/token", wrapper.ListTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/token", wrapper.SetToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/token/{token_uid}", wrapper.LookupToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/transactions/{cs_id}", wrapper.ListTransactionsByChargeStation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/transactions/{cs_id}/{transaction_id}", wrapper.LookupTransaction)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
